<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ck.dao.BorrowDao">

	<select id="findBorrow" resultType="Borrow">
		SELECT
		borrow.id,
		borrow.reader_id AS readerId,
		reader.name AS readerName,
		borrow.book_id
		AS bookId,
		book.name AS bookName,
		borrow.borrow_time AS borrowTime,
		borrow.return_borrow AS returnBorrow
		FROM
		borrow,
		reader,
		book
		WHERE
		borrow.reader_id = reader.id
		AND borrow.book_id = book.id
		ORDER BY
		borrow.id DESC
	</select>

	<select id="findBorrowById" parameterType="Integer" resultType="Borrow">
		SELECT
		borrow.id,
		borrow.reader_id AS readerId,
		reader.name AS
		readerName,
		borrow.book_id AS bookId,
		book.name AS bookName,
		borrow.borrow_time AS borrowTime,
		borrow.return_borrow AS returnBorrow
		FROM
		borrow,
		reader,
		book
		WHERE
		borrow.reader_id = reader.id
		AND
		borrow.book_id = book.id
		AND borrow.id = #{id}
	</select>

	<select id="findBorrowByIdList" parameterType="List" resultType="Borrow">
		SELECT
		id,
		reader_id AS readerId,
		book_id AS bookId,
		borrow_time AS
		borrowTime,
		return_borrow AS returnBorrow
		FROM
		borrow
		WHERE
		id in
		<foreach item="id" index="index" collection="list" open="("
			separator="," close=")">
			#{id}
		</foreach>
	</select>

	<insert id="addBorrow" parameterType="Borrow" keyProperty="id"
		useGeneratedKeys="true">
		INSERT borrow (
		reader_id,
		book_id,
		borrow_time
		)VALUES(
		#{readerId},
		#{bookId},
		now())
	</insert>

	<delete id="delBorrow" parameterType="Integer">
		DELETE
		FROM
		borrow
		WHERE
		id =
		#{id}
	</delete>

	<delete id="delBorrowList" parameterType="List">
		DELETE
		FROM
		borrow
		WHERE
		id in
		<foreach item="id" index="index" collection="list" open="("
			separator="," close=")">
			#{id}
		</foreach>
	</delete>

	<update id="changeBorrow" parameterType="Borrow">
		UPDATE borrow
		<set>
			<if test="readerId != null and readerId != ''">
				reader_id=#{readerId},
			</if>
			<if test="bookId != null and bookId != ''">
				book_id=#{bookId},
			</if>
			<if test="borrowTime != null and borrowTime != ''">
				borrow_time=#{borrowTime},
			</if>
			<if
				test="returnBorrow != null and returnBorrow != '' or returnBorrow == 0">
				<!-- 注意！0会判断成空值 -->
				return_borrow=#{returnBorrow},
			</if>
		</set>
		WHERE
		id = #{id}
	</update>
</mapper>